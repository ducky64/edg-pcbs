substitutions:
  name: "DeskController"

esphome:
  name: ducky-deskcontroller
  name_add_mac_suffix: true
  platform: esp32
  board: esp32-c3-devkitm-1
  on_boot:
    priority: 0  # when mostly everything else is done
    then:
      - lambda: pinMode(6, OUTPUT_OPEN_DRAIN );  // mode not set correctly in matrix_keypad
      - delay: 0.1s  # give controller a chance to handle the response before sending the next command
      - lambda: "id(desk).request_physical_limits();"
      - delay: 0.1s
      - lambda: "id(desk).request_limits();"
      - delay: 0.1s
      - lambda: "id(desk).request_settings();"
      - delay: 0.1s  # allow time for a response
      - script.execute: mem_target_init
  on_loop:
    - script.execute: toggle1234_led_loop

wifi:
  <<: !include ../wifi_config.yaml

<<: !include ../common_config.yaml

api:
  reboot_timeout: 0s


external_components:
  - source:
      type: git
      url: https://github.com/Rocka84/esphome_components/
    components: [ jiecang_desk_controller ]

# logger:  # for debugging desk controller component
#   level: VERBOSE
#   logs:
    # jiecang_desk_controller: VERBOSE


globals:
  # configuration constants
  - id: kBrightnessBackground
    type: float
    initial_value: '0.15'
  - id: kBrightnessActive
    type: float
    initial_value: '0.33'
  
  - id: kScreenActiveMillis
    type: int
    initial_value: '15000'
  - id: LastScreenActivityMillis
    type: int
    initial_value: '0'

  # stored values
  - id: DeskMem1Pos  # cm, local stored copy
    type: float
    restore_value: true
    initial_value: '0'
  - id: DeskMem2Pos
    type: float
    restore_value: true
    initial_value: '0'
  - id: DeskMem3Pos
    type: float
    restore_value: true
    initial_value: '0'
  - id: DeskMem4Pos
    type: float
    restore_value: true
    initial_value: '0'

  # temporary state
  - id: toggle12_state  # last memory state for toggle1/2, 1=mem1, 2=mem2, 0=invalid
    type: int
    initial_value: '0'
  - id: toggle34_state  # last memory state for toggle3/4, 1=mem3, 2=mem4, 0=invalid
    type: int
    initial_value: '0'
  - id: memory_target  # 0 = none / idle, 1-4 = memory positions
    type: int
    initial_value: '0'

script:
  - id: mem_target_init  # guesses the last memory target on startup
    then:
    - lambda: |-
        const float kMaxDelta = 0.1;
        if (id(DeskMem1Pos) != 0 && abs(id(desk_height).state - id(DeskMem1Pos)) < kMaxDelta) {
          id(memory_target) = 1;
          id(toggle12_state) = 1;
        } else if (id(DeskMem2Pos) != 0 && abs(id(desk_height).state - id(DeskMem2Pos)) < kMaxDelta) {
          id(memory_target) = 2;
          id(toggle12_state) = 2;
        }

        if (id(DeskMem3Pos) != 0 && abs(id(desk_height).state - id(DeskMem3Pos)) < kMaxDelta) {
          if (id(memory_target) == 0) {  // don't override
            id(memory_target) = 3;
          }
          id(toggle34_state) = 1;
        } else if (id(DeskMem4Pos) != 0 && abs(id(desk_height).state - id(DeskMem4Pos)) < kMaxDelta) {
          if (id(memory_target) == 0) {  // don't override
            id(memory_target) = 4;
          }
          id(toggle34_state) = 2;
        } 

  - id: NpxSet  # helper function to make LED ops take less lines
    parameters:
      lednum: int  # 0-indexed
      bright: float  # 0-1
      red: float  # 0-1
      green: float
      blue: float
      duration_ms: int  # 0 to latch
    then:
      - light.addressable_set:
          id: led
          range_from: !lambda return lednum;
          range_to: !lambda return lednum;
          red: !lambda return red * bright;
          green: !lambda return green * bright;
          blue: !lambda return blue * bright;
      - if:
          condition:
            - lambda: return duration_ms > 0;
          then:
            - delay: !lambda return duration_ms;
            - light.addressable_set:
                id: led
                range_from: !lambda return lednum;
                range_to: !lambda return lednum;
                red: 0
                green: 0
                blue: 0
  - id: toggle1234_led_loop
    then:
    - lambda: |-
        const int kUpdateFreq = 100;  // run at most this frequently
        auto currMillis = millis();
        static auto lastMillis = currMillis;
        if ((currMillis - lastMillis) < kUpdateFreq) {
          return;
        }

        auto currHeight = id(desk_height).state;
        static auto lastHeight = currHeight;
        static auto lastHeightUpdate = currMillis;
        if (currHeight != lastHeight) {
          lastHeight = currHeight;
          lastHeightUpdate = currMillis;
        }

        uint8_t activeLed = 255;  // NPX id and color for active LED
        float r = 0, g = 0, b = 0;
        if (id(memory_target) == 1) {
          activeLed = 0; r = 0; g = 1; b = 1;
        } else if (id(memory_target) == 2) {
          activeLed = 0; r = 1; g = 1; b = 0;
        } else if (id(memory_target) == 3) {
          activeLed = 1; r = 0; g = 1; b = 1;
        } else if (id(memory_target) == 4) {
          activeLed = 1; r = 1; g = 1; b = 0;
        }

        static auto lastBlink = 0;
        if ((currMillis - lastHeightUpdate) < 500) {  // blink if active moving
          if ((currMillis - lastBlink) > 500) {
            id(NpxSet).execute(activeLed, id(kBrightnessActive), r, g, b, 250);
            lastBlink = currMillis;
          }
          id(LastScreenActivityMillis) = millis();
        } else {
          lastBlink = 0;
          id(NpxSet).execute(activeLed, id(kBrightnessBackground), r, g, b, 0);
        }

        for (uint8_t i=0; i<2; i++) {  // clear other LEDs
          if (i != activeLed) {
            id(NpxSet).execute(i, 0, 0, 0, 0, 0);
          }
        }


uart:
  id: desk_uart
  tx_pin: GPIO5
  rx_pin: GPIO4
  baud_rate: 9600
  debug:
    direction: BOTH
    dummy_receiver: true
    after:
      delimiter: [0x7E]
      # timeout: 5ms
    sequence:
        # Use mulcmu's method for reading uart without a custome component: https://community.home-assistant.io/t/how-to-uart-read-without-custom-component/491950?u=mahko_mahko
      - lambda: |-
          UARTDebug::log_int(direction, bytes, ',');                // Log the message as int. Good for height message checks.
          UARTDebug::log_hex(direction, bytes, ',');                // Log the message in hex. Good for checking against protocol documentation.
          
# based on https://github.com/Rocka84/esphome_components/blob/master/components/jiecang_desk_controller/example_basic.yaml
# note, protocol reverse engineering here: https://gitlab.com/pimp-my-desk/desk-control/jiecang-reverse-engineering
# and https://github.com/phord/Jarvis
jiecang_desk_controller:
  id: desk
  buttons:
    step_up:
      name: "${name} Step up"
    step_down:
      name: "${name} Step down"
    position1:
      name: "${name} Position 1"
    position2:
      name: "${name} Position 2"
    position3:
      name: "${name} Position 3"
    position4:
      name: "${name} Position 4"
  numbers:
    height:
      id: desk_height
      name: "${name} Height"
  sensors:
    height_min:
      id: desk_height_min
      name: "${name} Height Min"
    height_max:
      id: desk_height_max
      name: "${name} Height Max"

matrix_keypad:
  id: keypad
  rows:
    - pin: 
        number: GPIO6
        mode: OUTPUT_OPEN_DRAIN  # this doesn't actually work
    - pin:
        number: GPIO3
        mode: OUTPUT_OPEN_DRAIN

  columns:
    - pin:
        number: GPIO19
        mode: INPUT_PULLUP
    - pin:
        number: GPIO18
        mode: INPUT_PULLUP
    - pin:
        number: GPIO10
        mode: INPUT_PULLUP

  keys: "012345"

binary_sensor:
  - platform: matrix_keypad
    keypad_id: keypad
    name: "${name} Key0"
    key: 0  # toggle memory positions 1/2
    on_click:
    - min_length: 10ms
      max_length: 999ms
      then:
        - lambda: |-
            auto d0 = abs(id(desk_height).state - id(DeskMem1Pos));
            auto d1 = abs(id(desk_height).state - id(DeskMem2Pos));
            if (id(toggle12_state) == 2 || id(toggle12_state) == 0 && d0 >= d1) {  // toggle OR go to further position
              id(desk).goto_position(1);
              id(desk).goto_position(1);  // repeat since just sending once is flakey
              id(memory_target) = 1;
              id(toggle12_state) = 1;
            } else {
              id(desk).goto_position(2);
              id(desk).goto_position(2);
              id(memory_target) = 2;
              id(toggle12_state) = 2;
            }
            id(LastScreenActivityMillis) = millis();
    - min_length: 2000ms
      max_length: 3000ms
      then:
        - lambda: |-
            if (id(toggle12_state) == 0 || id(toggle12_state) == 1) {
              id(desk).save_position(1);
              id(DeskMem1Pos) = id(desk_height).state;
              id(memory_target) = 1;
            } else {
              id(desk).save_position(2);
              id(DeskMem2Pos) = id(desk_height).state;
              id(memory_target) = 2;
            }
            id(LastScreenActivityMillis) = millis();
  - platform: matrix_keypad
    keypad_id: keypad
    name: "${name} Key1"
    key: 1  # toggle memory positions 3/4
    on_click:
    - min_length: 10ms
      max_length: 999ms
      then:
        - lambda: |-
            auto d0 = abs(id(desk_height).state - id(DeskMem3Pos));
            auto d1 = abs(id(desk_height).state - id(DeskMem4Pos));
            if (id(toggle34_state) == 2 || id(toggle34_state) == 0 && d0 >= d1) {  // toggle OR go to further position
              id(desk).goto_position(3);
              id(desk).goto_position(3);
              id(memory_target) = 3;
              id(toggle34_state) = 1;
            } else {
              id(desk).goto_position(4);
              id(desk).goto_position(4);
              id(memory_target) = 4;
              id(toggle34_state) = 2;
            }
            id(LastScreenActivityMillis) = millis();
    - min_length: 2000ms
      max_length: 3000ms
      then:
        - lambda: |-
            if (id(toggle34_state) == 0 || id(toggle34_state) == 1) {
              id(desk).save_position(3);
              id(DeskMem3Pos) = id(desk_height).state;
              id(memory_target) = 3;
            } else {
              id(desk).save_position(4);
              id(DeskMem4Pos) = id(desk_height).state;
              id(memory_target) = 4;
            }
            id(LastScreenActivityMillis) = millis();
  - platform: matrix_keypad
    keypad_id: keypad
    name: "${name} Key2"
    key: 2
    on_press:
      then:
        - lambda: "id(desk).request_physical_limits();"
        - delay: 0.1s
        - lambda: "id(desk).request_limits();"
        - delay: 0.1s
        - lambda: "id(desk).request_settings();"
  - platform: matrix_keypad
    keypad_id: keypad
    name: "${name} Key3"
    key: 3
    on_press:
      then:
        - lambda: id(desk).goto_height(50);
        - lambda: ESP_LOGI("top", "GOTO 50");
        - rtttl.play: 'two_short:d=4,o=5,b=100:16e6,16e6'
  - platform: matrix_keypad
    keypad_id: keypad
    id: keypad_4
    name: "${name} Key4"
    key: 4
    on_state:
      - while:
          condition:
            binary_sensor.is_on: keypad_4
          then:
            - lambda: |-
                id(desk).step_down();
                id(memory_target) = 0;
                id(NpxSet).execute(4, id(kBrightnessActive), 0, 1, 0, 250);
                id(LastScreenActivityMillis) = millis();
            - delay: 500ms
    on_release:
      then:
        - lambda: id(desk).stop();

  - platform: matrix_keypad
    keypad_id: keypad
    id: keypad_5
    name: "${name} Key5"
    key: 5
    on_state:
      - while:
          condition:
            binary_sensor.is_on: keypad_5
          then:
            - lambda: |-
                id(desk).step_up();
                id(memory_target) = 0;
                id(NpxSet).execute(5, id(kBrightnessActive), 0, 1, 0, 250);
                id(LastScreenActivityMillis) = millis();
            - delay: 500ms
    on_release:
      then:
        - lambda: id(desk).stop();

sensor:  # displays for saved state
  - platform: template
    id: display_mem1
    name: "${name} Mem1"
    lambda: |-
      if (id(DeskMem1Pos) != id(display_mem1).state) {
        return id(DeskMem1Pos);
      }
      return {};
    update_interval: 1s
  - platform: template
    id: display_mem2
    name: "${name} Mem2"
    lambda: |-
      if (id(DeskMem2Pos) != id(display_mem2).state) {
        return id(DeskMem2Pos);
      }
      return {};
    update_interval: 1s
  - platform: template
    id: display_mem3
    name: "${name} Mem3"
    lambda: |-
      if (id(DeskMem3Pos) != id(display_mem3).state) {
        return id(DeskMem3Pos);
      }
      return {};
    update_interval: 1s
  - platform: template
    id: display_mem4
    name: "${name} Mem4"
    lambda: |-
      if (id(DeskMem4Pos) != id(display_mem4).state) {
        return id(DeskMem4Pos);
      }
      return {};
    update_interval: 1s

light:
  - platform: neopixelbus  # seens to work better than esp32_rmt_led_strip
    id: led
    variant: sk6812
    pin: GPIO7
    num_leds: 6
    name: "${name} Neopixels"
    effects:
      - addressable_rainbow:
          name: Rainbow
  - platform: status_led
    name: "${name} Dbg"
    id: debug_led
    internal: true
    pin:
      number: GPIO9

output:
  - platform: ledc
    pin: GPIO8
    id: rtttl_out

rtttl:
  output: rtttl_out
  gain: 1%

i2c:
  scl: GPIO1
  sda: GPIO0
  frequency: 400kHz
  scan: false

font:
  - file: "resources/4x6.bdf"  # characters actually 3x5 plus 1px descender
    id: bdf4x6
  - file: "resources/6x10.bdf"  # characters actually 5x7 plus 2px descender
    id: bdf6x10

display:
  - platform: ssd1306_i2c
    model: "SSD1306 128x64"
    address: 0x3c
    reset_pin: GPIO2
    update_interval : 200ms
    lambda: |-
      if ((millis() - id(LastScreenActivityMillis)) > id(kScreenActiveMillis)) {
        return;  // screen off from inactivity
      }

      it.printf(0, 0, id(bdf6x10), TextAlign::TOP_LEFT, "%.1f", id(desk_height).state);
      it.printf(0, 8, id(bdf6x10), TextAlign::TOP_LEFT, "%.1f - %1.f", id(desk_height_min).state, id(desk_height_max).state);

      // char wifiSsidTrunc[16] = {0};
      // strncpy(wifiSsidTrunc, WiFi.SSID().c_str(), 15);
      // it.print(0, 64-6, id(bdf4x6), TextAlign::BOTTOM_LEFT, wifiSsidTrunc);
      it.print(0, 64, id(bdf4x6), TextAlign::BOTTOM_LEFT, WiFi.localIP().toString().c_str());
      it.printf(128, 64, id(bdf4x6), TextAlign::BOTTOM_RIGHT, "Ducky Desk");
