substitutions:
  name: "Iron"

esphome:
  name: ducky-iotiron
  name_add_mac_suffix: true
  platform: esp32
  board: esp32-s3-devkitc-1  # 8MB flash without PSRAM
  on_boot:
    - climate.control:  # turn off iron at power on
        id: iron_control
        mode: "OFF"

wifi:
  <<: !include ../wifi_config.yaml

# HASS API
api:

# Allow API
ota:

# Print Updates
logger:
  level: INFO

# WebServer component, displays some information
web_server:
    port: 80

light:
  - platform: binary
    name: "${name} Dbg"
    id: debug_led
    output: output_debug_led

climate:
  - platform: pid
    name: "Iron Controller"
    id: iron_control
    default_target_temperature: 275°C
    sensor: sen_temp
    heat_output: output_iron_command
    visual:
      min_temperature: 0
      max_temperature: 400
      temperature_step: 1
    control_parameters:
      kp: 1
      ki: 0.1
      output_averaging_samples: 5

# fan:  # allows manual power control
#   - platform: speed
#     id: iron_control
#     output: output_iron_command
#     name: "Iron Command Power"

output:
  - id: output_debug_led
    platform: gpio
    pin: GPIO0
    inverted: true
  - platform: mcpwm_sync
    id: output_iron_pwm
    pin: GPIO5
    pin_comp: GPIO4
    frequency: 200kHz
    deadtime_rising: 100ns
    deadtime_falling: 100ns
    sample_adc: adc_thermocouple
    blank_frequency: 25Hz
    blank_time: 1ms
  - platform: template  # a commanded power that transforms a target watt to PWM
    id: output_iron_command
    type: float
    write_action:
      - lambda: |-
          float kIronResistance = 2.3;  // ohms - lower estimate, to keep power within bounds
          float kMaxIronCurrent = 3.57;  // amps, limited by inductor capability
          float kSystemPower = 0.5;  // watts, guesstimate of system power draw excluding heater

          float maxOutputVoltage = kMaxIronCurrent * kIronResistance;

          // calculate max output voltage to stay within PD current limit
          float pdVoltage = id(fusb_selected_voltage).get_state();
          float maxPdCurrent = id(fusb_selected_current).get_state();

          float maxPower = pdVoltage * maxPdCurrent - kSystemPower;
          maxOutputVoltage = min(maxOutputVoltage, sqrt(maxPower * kIronResistance));
          float maxDc = pdVoltage > 0 ? min(1.0f, maxOutputVoltage / pdVoltage) : 0;

          // calculate target dc given power input
          float targetVoltage = sqrt((state * 100) * kIronResistance);
          float targetDc = pdVoltage > 0 ? targetVoltage / pdVoltage : 0;

          id(output_iron_pwm)->write_state(min(targetDc, maxDc));

i2c:
  scl: GPIO42
  sda: GPIO41
  frequency: 400kHz
  scan: false

font:
  - file: "resources/4x6.bdf"  # characters actually 3x5 plus 1px descender
    id: bdf4x6
  - file: "resources/6x10.bdf"  # characters actually 5x7 plus 2px descender
    id: bdf6x10
    
display:
  - platform: ssd1306_i2c
    model: "SSD1306 128x64"
    address: 0x3c
    reset_pin: GPIO18
    update_interval : 200ms
    lambda: |-
      it.printf(0, 0, id(bdf6x10), "Ducky Iron");

      it.printf(0, 12, id(bdf6x10), "%3.0f C / %3.0f C", id(sen_temp).get_state(), id(iron_control).target_temperature);

      if (id(iron_control).mode == CLIMATE_MODE_OFF) {
        it.printf(0, 22, id(bdf6x10), "OFF");
      } else {
        float power = id(sen_piron).get_state();
        it.printf(0, 22, id(bdf6x10), "%3.0f W", power);

        const int kMaxPower = 32;  // watts, arbitrary based on ~3.5A max current
        const int kBarX = 30, kBarY = 23;
        const int kBarWidth = 128 - kBarX;
        it.rectangle(kBarX, kBarY, kBarWidth, 7);
        int fillWidth = (int)(power * kBarWidth) / kMaxPower;
        if (fillWidth > kBarWidth) {
          fillWidth = kBarWidth;
        }
        if (fillWidth > 0) {
          it.filled_rectangle(kBarX, kBarY, fillWidth, 7);
        }
      }

      it.printf(0, 64-6-10, id(bdf6x10), "USB  %2.1f V", id(fusb_vbus).get_state());

      it.printf(0, 64-6, id(bdf4x6), "%s", WiFi.localIP().toString().c_str());
      it.printf(128-(4*4), 64-6, id(bdf4x6), "%2.0f C", id(cold_temp).state);
      
binary_sensor:
  - platform: gpio
    id: encoder_sw
    name: "${name} Encoder Sw"
    pin: 
      number: GPIO15
      inverted: true
      mode:
        input: true
        pullup: true
    filters:
      - delayed_on: 10ms
    on_click:
      - then:
          - lambda: |-
              if (id(iron_control).mode == CLIMATE_MODE_OFF) {
                id(iron_control).make_call().set_mode("HEAT").perform();
              } else {
                id(iron_control).make_call().set_mode("OFF").perform();
              }
    
fusb302:
  id: usbpd
  target: 12v

text_sensor:
  - platform: fusb302
    status:
      name: "${name} PD Status"  
    capabilities:
      name: "${name} PD Capabilities"
  
sensor:
  - platform: fusb302
    cc:
      name: "${name} PD CC"
    vbus:
      id: fusb_vbus
      name: "${name} PD VBus"
    selected_voltage:
      id: fusb_selected_voltage
      name: "${name} PD Selected Voltage"
    selected_current:
      id: fusb_selected_current
      name: "${name} PD Selected Current"

  - platform: adc
    id: adc_vusb
    name: "${name} VUsb"
    pin: GPIO1
    accuracy_decimals: 2
    update_interval: 2s
    attenuation: auto
    filters:
      - multiply: 9.174
  - platform: adc
    id: adc_viron
    name: "${name} VIron"
    pin: GPIO6
    accuracy_decimals: 2
    update_interval: 0.2s
    attenuation: auto
    filters:
      - multiply: 2.469
  - platform: adc
    id: adc_iiron
    name: "${name} IIron"
    pin: GPIO7
    accuracy_decimals: 2
    update_interval: 0.2s
    attenuation: auto
    filters:
      - multiply: 2.114  # 22mOhm resistor * 22.1x amp
      - lambda: |-
          float voltage = id(adc_viron).get_state();
          id(sen_piron).publish_state(x * voltage);  // power calculated here to sample synchronously
          if (x > 0) {
            id(sen_riron).publish_state(voltage / x);
          } else {
            id(sen_riron).publish_state(NAN);
          }
          return x;
    unit_of_measurement: A
  - platform: template  # value calculated and published in current sensor
    id: sen_piron
    name: "${name} PIron"
    unit_of_measurement: W
    accuracy_decimals: 1
  - platform: template  # value calculated and published in current sensor
    id: sen_riron
    name: "${name} RIron"
    unit_of_measurement: Ω
    accuracy_decimals: 2
  - platform: adc
    id: adc_thermocouple
    name: "${name} Thermocouple"
    pin: GPIO8
    accuracy_decimals: 0
    update_interval: 10days  # sampling controlled by MCPWM blanking, should not trigger by itself
    attenuation: auto
    filters:
      # 158x amplification on diffamp, coefficient on thermocouple empirically determined (poorly)
      # common thermocouple coefficients: https://www.analog.com/en/analog-dialogue/articles/measuring-temp-using-thermocouples.html
      - lambda: |-
          float volts = x / 158;
          id(sen_temp).publish_state(volts / 25e-6 + id(cold_temp).get_state());
          return volts * 1e6;
    unit_of_measurement: uV
  - platform: template  # value calculated and published in ADC sensor
    id: sen_temp
    name: "${name} Temp"
    unit_of_measurement: C
    accuracy_decimals: 0

  - platform: rotary_encoder
    id: encoder
    name: "${name} Encoder"
    pin_a:
      number: GPIO17
      inverted: true
      mode:
        input: true
        pullup: true
    pin_b:
      number: GPIO16
      inverted: true
      mode:
        input: true
        pullup: true
    on_clockwise:
    - then:
        - lambda: |-
            id(iron_control).target_temperature += 1;
    on_anticlockwise:
    - then:
        - lambda: |-
            id(iron_control).target_temperature -= 1;

  - platform: hdc1080
    temperature:
      id: cold_temp
      name: "${name} Ambient"
    humidity:
      name: "${name} Humidity"
    update_interval: 15s

i2s_audio:
  i2s_lrclk_pin: GPIO38
  i2s_bclk_pin: GPIO9

speaker:
  - platform: i2s_audio
    dac_type: external
    i2s_dout_pin: GPIO40
    mode: mono
