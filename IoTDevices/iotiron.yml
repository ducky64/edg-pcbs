substitutions:
  name: "Iron"

esphome:
  name: ducky-iotiron
  name_add_mac_suffix: true
  platform: esp32
  board: esp32-s3-devkitc-1  # 8MB flash without PSRAM

wifi:
  <<: !include ../wifi_config.yaml

# HASS API
api:

# Allow API
ota:

# Print Updates
logger:
  level: INFO

# WebServer component, displays some information
web_server:
    port: 80

time:
  - platform: sntp
    id: sntp_time

light:
  - platform: binary
    name: "${name} Dbg"
    id: debug_led
    output: output_debug_led

output:
  - id: output_debug_led
    platform: gpio
    pin: GPIO0
    inverted: true
  - platform: mcpwm_sync
    id: output_iron_pwm
    pin: GPIO5
    pin_comp: GPIO4
    frequency: 200kHz
    deadtime_rising: 150ns
    deadtime_falling: 150ns
    sample_adc: adc_temp
    blank_frequency: 10Hz
    blank_time: 1ms

fan:
  - platform: speed
    id: pwm_ctl
    output: output_iron_pwm
    name: "${name} PWM"
    on_turn_on:
      - then:
        - light.turn_on: debug_led
    on_turn_off:
      - then:
        - light.turn_off: debug_led

i2c:
  scl: GPIO42
  sda: GPIO41
  frequency: 400kHz
  scan: false

font:
  - file: "resources/4x6.bdf"  # characters actually 3x5 plus 1px descender
    id: bdf4x6
  - file: "resources/6x10.bdf"  # characters actually 5x7 plus 2px descender
    id: bdf6x10
    
display:  
  - platform: ssd1306_i2c
    model: "SSD1306 128x64"
    address: 0x3c
    reset_pin: GPIO18
    lambda: |-
      it.printf(0, 0, id(bdf6x10), "Ducky Iron");
      it.printf(0, 12, id(bdf6x10), "USB  %2.1f V", id(fusb_vbus).get_state());
      it.printf(0, 22, id(bdf6x10), "IRON %2.0f W  %2.0f%%", id(adc_iiron).get_state(), id(output_iron_pwm).get_state());
      it.printf(0, 32, id(bdf6x10), "     %3.0f C", id(adc_temp).get_state());

      it.printf(0, 64-6, id(bdf4x6), "%s", WiFi.localIP().toString().c_str());
      it.strftime(64, 64-6, id(bdf4x6), "%H:%M:%S", id(sntp_time).now());
      it.printf(128-(4*4), 64-6, id(bdf4x6), "%2.0f C", id(cold_temp).state);
      

binary_sensor:
  - platform: gpio
    id: encoder_sw
    name: "${name} Encoder Sw"
    pin: 
      number: GPIO15
      inverted: true
      mode:
        input: true
        pullup: true
    filters:
      - delayed_on: 10ms
    on_click:
      - then:
          - lambda: |-
              if (!id(pwm_ctl).state) {
                id(pwm_ctl).turn_on().perform();
              } else {
                id(pwm_ctl).turn_off().perform();
              }
    
fusb302:
  id: usbpd

text_sensor:
  - platform: fusb302
    status:
      name: "${name} PD Status"  
    capabilities:
      name: "${name} PD Capabilities"
  
sensor:
  - platform: fusb302
    cc:
      name: "${name} PD CC"
    vbus:
      id: fusb_vbus
      name: "${name} PD VBus"

  - platform: adc
    id: adc_vusb
    name: "${name} VUsb"
    pin: GPIO1
    accuracy_decimals: 2
    update_interval: 2s
    attenuation: auto
    filters:
      - multiply: 9.174
  - platform: adc
    id: adc_viron
    name: "${name} VIron"
    pin: GPIO6
    accuracy_decimals: 2
    update_interval: 0.2s
    attenuation: auto
    filters:
      - multiply: 2.469
  - platform: adc
    id: adc_iiron
    name: "${name} IIron"
    pin: GPIO7
    accuracy_decimals: 2
    update_interval: 0.2s
    attenuation: auto
    filters:
      - multiply: 2.114  # 22mOhm resistor * 22.1x amp
      # TODO the power should be a separate item, but not clear how to make a dummy sensor
      - lambda: return x * id(adc_viron).get_state();
    unit_of_measurement: W
  - platform: adc
    id: adc_temp
    name: "${name} Temp"
    pin: GPIO8
    accuracy_decimals: 2
    update_interval: 10days  # sampling controlled by MCPWM blanking, should not trigger by itself
    attenuation: auto
    filters:
      # 158x amplification on diffamp, ~23uV/K coefficient on thermocouple poorly empirically determined
      # common thermocouple coefficients: https://www.analog.com/en/analog-dialogue/articles/measuring-temp-using-thermocouples.html
      - lambda: return x / 158 / 23e-6 + id(cold_temp).get_state();
    unit_of_measurement: C
  - platform: rotary_encoder
    id: encoder
    name: "${name} Encoder"
    pin_a:
      number: GPIO17
      inverted: true
      mode:
        input: true
        pullup: true
    pin_b:
      number: GPIO16
      inverted: true
      mode:
        input: true
        pullup: true
  - platform: hdc1080
    temperature:
      id: cold_temp
      name: "${name} Ambient"
    humidity:
      name: "${name} Humidity"
    update_interval: 15s

i2s_audio:
  i2s_lrclk_pin: GPIO38
  i2s_bclk_pin: GPIO9

speaker:
  - platform: i2s_audio
    dac_type: external
    i2s_dout_pin: GPIO40
    mode: mono
