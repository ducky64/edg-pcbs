substitutions:
  name: "SevenSegment"

esphome:
  name: ducky-sevensegment
  name_add_mac_suffix: true
  platform: esp32
  board: esp32dev
  on_boot:
    - light.turn_on:
        id: led
        brightness: 15%
  includes:
    - digit.h

wifi:
  <<: !include ../wifi_config.yaml

# HASS API
api:
  services:
    - service: play_rtttl
      variables:
        song_str: string
      then:
        - rtttl.play:
            rtttl: !lambda 'return song_str;'

# Allow API
ota:

# Print Updates
logger:

# WebServer component, displays some information
web_server:
    port: 80

time:
  - platform: sntp
    id: sntp_time

light:
  - platform: neopixelbus
    id: led
    variant: sk6812
    pin: GPIO27
    num_leds: 60
    name: "${name} Clock"
    effects:
      - addressable_lambda:
          name: "Time"
          update_interval: 250ms
          lambda: |-  # inspired by https://www.thingiverse.com/thing:4689116
            const int kLedsPerSegment = 2;
            const int kDigitOffsets[4] = {0, 14, 32, 46};
            const int kMetaOffset = 28;  // PM, AL
            const int kColonOffset = 30;
            
            auto time = id(sntp_time).now();
                                              
            it.all() = Color(0,0,0,0);            

            if ((time.hour / 10) > 0) {  // don't render zero
              setDigit(it, current_color, time.hour / 10, kDigitOffsets[0], kLedsPerSegment, kLedsPerSegment);
            }
            setDigit(it, current_color, time.hour % 10, kDigitOffsets[1], kLedsPerSegment, kLedsPerSegment);
            setDigit(it, current_color, time.minute / 10, kDigitOffsets[2], kLedsPerSegment, kLedsPerSegment);
            setDigit(it, current_color, time.minute % 10, kDigitOffsets[3], kLedsPerSegment, kLedsPerSegment);
            
            if (time.second % 2) {
              it[kColonOffset] = current_color;
              it[kColonOffset + 1] = current_color;
            }
      - addressable_flicker:
          name: Flicker (Custom, high)
          intensity: 25%
      - addressable_color_wipe:
          name: Color Wipe (Random)
      - addressable_scan:
          name: Scan (Custom)
      - addressable_rainbow:
          name: Rainbow
    on_turn_on:
      - light.turn_on:
          id: led
          effect: "Time"
        
bme680_bsec:
    address: 0x76
    temperature_offset: 0
    iaq_mode: static
    sample_rate: lp
    state_save_interval: 6h
  
i2c:
  sda: GPIO32
  scl: GPIO33
  scan: True

binary_sensor:
  - platform: gpio
    name: "${name} SwSet"
    pin: 
      number: GPIO18
      inverted: true
      mode:
        input: true
        pullup: true
    filters:
      - delayed_on: 10ms
    on_click:
      - then:
        - light.toggle:
            id: led
  - platform: gpio
    name: "${name} SwUp"
    pin: 
      number: GPIO19
      inverted: true
      mode:
        input: true
        pullup: true
    filters:
      - delayed_on: 10ms
    on_click:
      - then:
        - lambda: |-
            auto light = id(led);
            auto call = light->turn_on();
            if (light->remote_values.is_on()) {  // first turn when off only turns on without changing level
              call.set_brightness(light->remote_values.get_brightness() + 0.05);
            }
            call.perform();
  # where IO20 should be is NC on the ESP32E module
  - platform: gpio
    name: "${name} SwRst"
    pin: 
      number: GPIO21
      inverted: true
      mode:
        input: true
        pullup: true
    filters:
      - delayed_on: 10ms

sensor:
  - platform: adc
    name: "${name} Vin"
    pin: GPIO35
    accuracy_decimals: 2
    update_interval: 60s
    attenuation: 11dB
    filters:
      - multiply: 2
      
  - platform: bh1750
    name: "${name} BH1750 Illuminance"
    address: 0x23
    update_interval: 60s
    on_value:
      - then:
        - lambda: |-
            auto pixels = id(led);
            if (pixels->remote_values.is_on()) {  // only update brightness if light is on
              auto call = pixels->turn_on();
              float brightness = x / 16.0 + 0.10;  // arbitrary full brightness scaling
              if (brightness < 0.11) {
                brightness = 0.11;  // minimum for pixels to light up at all
              }
              call.set_brightness(brightness);
              call.perform();
            }

  - platform: bme680_bsec
    temperature:
      name: "${name} BME680 Temperature"
      filters:
        - median
    pressure:
      name: "${name} BME680 Pressure"
      filters:
        - median
    humidity:
      name: "${name} BME680 Humidity"
      filters:
        - median
    gas_resistance:
      name: "${name} BME680 Gas Resistance"
      filters:
        - median
    iaq:
      name: "${name} BME680 IAQ"
      filters:
        - median
    iaq_accuracy:
      name: "${name} BME680 Numeric IAQ Accuracy"
    co2_equivalent:
      name: "${name} BME680 CO2 Equivalent"
      filters:
        - median
    breath_voc_equivalent:
      name: "${name} BME680 Breath VOC Equivalent"
      filters:
        - median

output:
  - platform: ledc
    pin: GPIO5
    id: rtttl_out

rtttl:
  output: rtttl_out
  on_finished_playback:
    - logger.log: 'Song ended!'

text_sensor:
  - platform: bme680_bsec
    iaq_accuracy:
      name: "${name} BME680 IAQ Accuracy"
